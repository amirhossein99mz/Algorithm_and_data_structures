1. Struct with static arrays:

struct Person {
    char first_name[100];   // fixed-size array
    char last_name[100];    // fixed-size array
    int id_number;
    float gpa;
};

struct Person *people = malloc(n * sizeof(struct Person));



2. Struct with dynamic arrays (pointers):

struct Person {
    char *first_name;       // dynamically allocated
    char *last_name;        // dynamically allocated
    int id_number;
    float gpa;
};

struct Person *people = malloc(n * sizeof(struct Person));

for (i = 0; i < n; i++) {
    people[i].first_name = malloc(strlen(fn) + 1);
    people[i].last_name  = malloc(strlen(ln) + 1);
}


More flexible, only allocates needed space.

Must free both inner strings and main array.

3. Common mistake ðŸš«

Forgetting to allocate inner fields when using pointers.

Leads to segmentation fault.

ðŸ‘‰ Summary

Static fields â†’ simpler, but fixed size.

Dynamic fields â†’ flexible, but requires multiple malloc/free.
